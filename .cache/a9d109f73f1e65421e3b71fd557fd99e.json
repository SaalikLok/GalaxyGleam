{"id":"aB3T","dependencies":[{"name":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/package.json","includedInParent":true,"mtime":1531478196000},{"name":"/Users/saaliklok/Documents/Projects/GalaxyGleam/package.json","includedInParent":true,"mtime":1534524783201},{"name":"/Users/saaliklok/Documents/Projects/GalaxyGleam/.babelrc","includedInParent":true,"mtime":1534008004456},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/utils/Class.js"},{"name":"../../gameobjects/components","loc":{"line":8,"column":25},"parent":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/gameobjects/components/index.js"},{"name":"./DynamicTilemapLayerRender","loc":{"line":9,"column":40},"parent":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayerRender.js"},{"name":"../../gameobjects/GameObject","loc":{"line":10,"column":25},"parent":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/gameobjects/GameObject.js"},{"name":"../components","loc":{"line":11,"column":32},"parent":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/src/tilemaps/components/index.js"}],"generated":{"js":"var i=require(\"../../utils/Class\"),t=require(\"../../gameobjects/components\"),e=require(\"./DynamicTilemapLayerRender\"),l=require(\"../../gameobjects/GameObject\"),r=require(\"../components\"),n=new i({Extends:l,Mixins:[t.Alpha,t.BlendMode,t.ComputedSize,t.Depth,t.Flip,t.GetBounds,t.Origin,t.Pipeline,t.ScaleMode,t.Transform,t.Visible,t.ScrollFactor,e],initialize:function(i,t,e,n,s,o){l.call(this,i,\"DynamicTilemapLayer\"),this.isTilemap=!0,this.tilemap=t,this.layerIndex=e,this.layer=t.layers[e],this.layer.tilemapLayer=this,this.tileset=n,this.culledTiles=[],this.skipCull=!1,this.tilesDrawn=0,this.tilesTotal=this.layer.width*this.layer.height,this.cullPaddingX=1,this.cullPaddingY=1,this.cullCallback=r.CullTiles,this.setAlpha(this.layer.alpha),this.setPosition(s,o),this.setOrigin(),this.setSize(this.layer.tileWidth*this.layer.width,this.layer.tileHeight*this.layer.height),this.initPipeline(\"TextureTintPipeline\")},calculateFacesAt:function(i,t){return r.CalculateFacesAt(i,t,this.layer),this},calculateFacesWithin:function(i,t,e,l){return r.CalculateFacesWithin(i,t,e,l,this.layer),this},createFromTiles:function(i,t,e,l,n){return r.CreateFromTiles(i,t,e,l,n,this.layer)},cull:function(i){return this.cullCallback(this.layer,i,this.culledTiles)},copy:function(i,t,e,l,n,s,o){return r.Copy(i,t,e,l,n,s,o,this.layer),this},destroy:function(){this.layer.tilemapLayer===this&&(this.layer.tilemapLayer=void 0),this.tilemap=void 0,this.layer=void 0,this.tileset=void 0,this.culledTiles.length=0,this.cullCallback=null,l.prototype.destroy.call(this)},fill:function(i,t,e,l,n,s){return r.Fill(i,t,e,l,n,s,this.layer),this},filterTiles:function(i,t,e,l,n,s,o){return r.FilterTiles(i,t,e,l,n,s,o,this.layer)},findByIndex:function(i,t,e){return r.FindByIndex(i,t,e,this.layer)},findTile:function(i,t,e,l,n,s,o){return r.FindTile(i,t,e,l,n,s,o,this.layer)},forEachTile:function(i,t,e,l,n,s,o){return r.ForEachTile(i,t,e,l,n,s,o,this.layer),this},getTileAt:function(i,t,e){return r.GetTileAt(i,t,e,this.layer)},getTileAtWorldXY:function(i,t,e,l){return r.GetTileAtWorldXY(i,t,e,l,this.layer)},getTilesWithin:function(i,t,e,l,n){return r.GetTilesWithin(i,t,e,l,n,this.layer)},getTilesWithinShape:function(i,t,e){return r.GetTilesWithinShape(i,t,e,this.layer)},getTilesWithinWorldXY:function(i,t,e,l,n,s){return r.GetTilesWithinWorldXY(i,t,e,l,n,s,this.layer)},hasTileAt:function(i,t){return r.HasTileAt(i,t,this.layer)},hasTileAtWorldXY:function(i,t,e){return r.HasTileAtWorldXY(i,t,e,this.layer)},putTileAt:function(i,t,e,l){return r.PutTileAt(i,t,e,l,this.layer)},putTileAtWorldXY:function(i,t,e,l,n){return r.PutTileAtWorldXY(i,t,e,l,n,this.layer)},putTilesAt:function(i,t,e,l){return r.PutTilesAt(i,t,e,l,this.layer),this},randomize:function(i,t,e,l,n){return r.Randomize(i,t,e,l,n,this.layer),this},removeTileAt:function(i,t,e,l){return r.RemoveTileAt(i,t,e,l,this.layer)},removeTileAtWorldXY:function(i,t,e,l,n){return r.RemoveTileAtWorldXY(i,t,e,l,n,this.layer)},renderDebug:function(i,t){return r.RenderDebug(i,t,this.layer),this},replaceByIndex:function(i,t,e,l,n,s){return r.ReplaceByIndex(i,t,e,l,n,s,this.layer),this},setSkipCull:function(i){return void 0===i&&(i=!0),this.skipCull=i,this},setCullPadding:function(i,t){return void 0===i&&(i=1),void 0===t&&(t=1),this.cullPaddingX=i,this.cullPaddingY=t,this},setCollision:function(i,t,e){return r.SetCollision(i,t,e,this.layer),this},setCollisionBetween:function(i,t,e,l){return r.SetCollisionBetween(i,t,e,l,this.layer),this},setCollisionByProperty:function(i,t,e){return r.SetCollisionByProperty(i,t,e,this.layer),this},setCollisionByExclusion:function(i,t,e){return r.SetCollisionByExclusion(i,t,e,this.layer),this},setCollisionFromCollisionGroup:function(i,t){return r.SetCollisionFromCollisionGroup(i,t,this.layer),this},setTileIndexCallback:function(i,t,e){return r.SetTileIndexCallback(i,t,e,this.layer),this},setTileLocationCallback:function(i,t,e,l,n,s){return r.SetTileLocationCallback(i,t,e,l,n,s,this.layer),this},shuffle:function(i,t,e,l){return r.Shuffle(i,t,e,l,this.layer),this},swapByIndex:function(i,t,e,l,n,s){return r.SwapByIndex(i,t,e,l,n,s,this.layer),this},tileToWorldX:function(i,t){return r.TileToWorldX(i,t,this.layer)},tileToWorldY:function(i,t){return r.TileToWorldY(i,t,this.layer)},tileToWorldXY:function(i,t,e,l){return r.TileToWorldXY(i,t,e,l,this.layer)},weightedRandomize:function(i,t,e,l,n){return r.WeightedRandomize(i,t,e,l,n,this.layer),this},worldToTileX:function(i,t,e){return r.WorldToTileX(i,t,e,this.layer)},worldToTileY:function(i,t,e){return r.WorldToTileY(i,t,e,this.layer)},worldToTileXY:function(i,t,e,l,n){return r.WorldToTileXY(i,t,e,l,n,this.layer)}});module.exports=n;","map":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":35}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":37}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":45}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":77}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":79}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":87}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":118}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":120}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":128}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":160}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":162}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":170}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":49,"column":0},"generated":{"line":1,"column":187}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":49,"column":0},"generated":{"line":1,"column":189}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":49,"column":0},"generated":{"line":1,"column":193}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":49,"column":0},"generated":{"line":1,"column":195}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":51,"column":0},"generated":{"line":1,"column":196}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":51,"column":0},"generated":{"line":1,"column":204}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":53,"column":0},"generated":{"line":1,"column":206}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":53,"column":0},"generated":{"line":1,"column":213}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":54,"column":0},"generated":{"line":1,"column":214}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":54,"column":0},"generated":{"line":1,"column":216}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":55,"column":0},"generated":{"line":1,"column":222}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":55,"column":0},"generated":{"line":1,"column":224}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":56,"column":0},"generated":{"line":1,"column":234}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":56,"column":0},"generated":{"line":1,"column":236}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":57,"column":0},"generated":{"line":1,"column":249}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":57,"column":0},"generated":{"line":1,"column":251}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":58,"column":0},"generated":{"line":1,"column":257}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":58,"column":0},"generated":{"line":1,"column":259}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":59,"column":0},"generated":{"line":1,"column":264}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":59,"column":0},"generated":{"line":1,"column":266}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":60,"column":0},"generated":{"line":1,"column":276}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":60,"column":0},"generated":{"line":1,"column":278}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":61,"column":0},"generated":{"line":1,"column":285}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":61,"column":0},"generated":{"line":1,"column":287}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":62,"column":0},"generated":{"line":1,"column":296}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":62,"column":0},"generated":{"line":1,"column":298}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":63,"column":0},"generated":{"line":1,"column":308}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":63,"column":0},"generated":{"line":1,"column":310}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":64,"column":0},"generated":{"line":1,"column":320}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":64,"column":0},"generated":{"line":1,"column":322}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":65,"column":0},"generated":{"line":1,"column":330}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":65,"column":0},"generated":{"line":1,"column":332}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":66,"column":0},"generated":{"line":1,"column":345}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":69,"column":0},"generated":{"line":1,"column":348}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":71,"column":0},"generated":{"line":1,"column":359}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":71,"column":0},"generated":{"line":1,"column":368}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":71,"column":0},"generated":{"line":1,"column":370}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":71,"column":0},"generated":{"line":1,"column":372}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":71,"column":0},"generated":{"line":1,"column":374}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":71,"column":0},"generated":{"line":1,"column":376}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":71,"column":0},"generated":{"line":1,"column":378}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":73,"column":0},"generated":{"line":1,"column":381}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":73,"column":0},"generated":{"line":1,"column":383}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":73,"column":0},"generated":{"line":1,"column":388}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":73,"column":0},"generated":{"line":1,"column":393}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":73,"column":0},"generated":{"line":1,"column":395}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":83,"column":0},"generated":{"line":1,"column":418}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":83,"column":0},"generated":{"line":1,"column":423}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":83,"column":0},"generated":{"line":1,"column":434}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":92,"column":0},"generated":{"line":1,"column":436}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":92,"column":0},"generated":{"line":1,"column":441}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":92,"column":0},"generated":{"line":1,"column":449}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":101,"column":0},"generated":{"line":1,"column":451}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":101,"column":0},"generated":{"line":1,"column":456}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":101,"column":0},"generated":{"line":1,"column":467}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":111,"column":0},"generated":{"line":1,"column":469}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":111,"column":0},"generated":{"line":1,"column":474}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":111,"column":0},"generated":{"line":1,"column":480}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":111,"column":0},"generated":{"line":1,"column":482}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":111,"column":0},"generated":{"line":1,"column":489}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":113,"column":0},"generated":{"line":1,"column":492}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":113,"column":0},"generated":{"line":1,"column":497}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":113,"column":0},"generated":{"line":1,"column":503}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":113,"column":0},"generated":{"line":1,"column":516}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":122,"column":0},"generated":{"line":1,"column":521}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":122,"column":0},"generated":{"line":1,"column":526}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":122,"column":0},"generated":{"line":1,"column":534}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":132,"column":0},"generated":{"line":1,"column":536}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":132,"column":0},"generated":{"line":1,"column":541}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":132,"column":0},"generated":{"line":1,"column":553}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":145,"column":0},"generated":{"line":1,"column":556}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":145,"column":0},"generated":{"line":1,"column":561}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":145,"column":0},"generated":{"line":1,"column":571}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":155,"column":0},"generated":{"line":1,"column":573}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":155,"column":0},"generated":{"line":1,"column":578}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":155,"column":0},"generated":{"line":1,"column":589}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":165,"column":0},"generated":{"line":1,"column":591}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":165,"column":0},"generated":{"line":1,"column":596}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":165,"column":0},"generated":{"line":1,"column":607}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":165,"column":0},"generated":{"line":1,"column":612}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":165,"column":0},"generated":{"line":1,"column":618}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":165,"column":0},"generated":{"line":1,"column":624}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":165,"column":0},"generated":{"line":1,"column":629}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":165,"column":0},"generated":{"line":1,"column":635}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":177,"column":0},"generated":{"line":1,"column":642}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":177,"column":0},"generated":{"line":1,"column":647}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":177,"column":0},"generated":{"line":1,"column":660}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":189,"column":0},"generated":{"line":1,"column":662}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":189,"column":0},"generated":{"line":1,"column":667}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":189,"column":0},"generated":{"line":1,"column":680}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":208,"column":0},"generated":{"line":1,"column":682}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":208,"column":0},"generated":{"line":1,"column":687}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":208,"column":0},"generated":{"line":1,"column":700}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":208,"column":0},"generated":{"line":1,"column":702}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":1,"column":712}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":1,"column":717}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":1,"column":726}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":1,"column":731}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":1,"column":737}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":211,"column":0},"generated":{"line":1,"column":744}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":211,"column":0},"generated":{"line":1,"column":749}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":211,"column":0},"generated":{"line":1,"column":761}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":211,"column":0},"generated":{"line":1,"column":763}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":766}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":771}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":783}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":788}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":796}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":801}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":807}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":817}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":822}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":828}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":834}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":839}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":845}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":856}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":861}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":1,"column":867}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":215,"column":0},"generated":{"line":1,"column":875}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":215,"column":0},"generated":{"line":1,"column":880}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":215,"column":0},"generated":{"line":1,"column":893}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":231,"column":0},"generated":{"line":1,"column":917}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":231,"column":0},"generated":{"line":1,"column":934}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":231,"column":0},"generated":{"line":1,"column":943}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":231,"column":0},"generated":{"line":1,"column":945}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":235,"column":0},"generated":{"line":1,"column":948}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":1,"column":955}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":1,"column":957}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":1,"column":974}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":1,"column":976}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":1,"column":978}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":1,"column":983}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":235,"column":0},"generated":{"line":1,"column":990}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":253,"column":0},"generated":{"line":1,"column":996}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":253,"column":0},"generated":{"line":1,"column":1017}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":253,"column":0},"generated":{"line":1,"column":1026}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":253,"column":0},"generated":{"line":1,"column":1028}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":253,"column":0},"generated":{"line":1,"column":1030}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":253,"column":0},"generated":{"line":1,"column":1032}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":257,"column":0},"generated":{"line":1,"column":1035}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":255,"column":0},"generated":{"line":1,"column":1042}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":255,"column":0},"generated":{"line":1,"column":1044}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":255,"column":0},"generated":{"line":1,"column":1065}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":255,"column":0},"generated":{"line":1,"column":1067}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":255,"column":0},"generated":{"line":1,"column":1069}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":255,"column":0},"generated":{"line":1,"column":1071}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":255,"column":0},"generated":{"line":1,"column":1073}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":255,"column":0},"generated":{"line":1,"column":1078}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":257,"column":0},"generated":{"line":1,"column":1085}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":280,"column":0},"generated":{"line":1,"column":1091}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":280,"column":0},"generated":{"line":1,"column":1107}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":280,"column":0},"generated":{"line":1,"column":1116}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":280,"column":0},"generated":{"line":1,"column":1118}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":280,"column":0},"generated":{"line":1,"column":1120}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":280,"column":0},"generated":{"line":1,"column":1122}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":280,"column":0},"generated":{"line":1,"column":1124}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1127}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1134}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1136}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1152}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1154}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1156}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1158}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1160}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1162}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1167}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":296,"column":0},"generated":{"line":1,"column":1175}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":296,"column":0},"generated":{"line":1,"column":1180}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":296,"column":0},"generated":{"line":1,"column":1189}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1192}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1199}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1204}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1217}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1222}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1228}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1230}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1235}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":1,"column":1249}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":1,"column":1254}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":1,"column":1263}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":1,"column":1265}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":1,"column":1267}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":1,"column":1269}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":1,"column":1271}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":1,"column":1273}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":1,"column":1275}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":323,"column":0},"generated":{"line":1,"column":1278}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1285}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1287}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1292}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1294}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1296}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1298}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1300}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1302}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1304}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1306}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":1,"column":1311}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":323,"column":0},"generated":{"line":1,"column":1318}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":332,"column":0},"generated":{"line":1,"column":1324}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":332,"column":0},"generated":{"line":1,"column":1332}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1343}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1348}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1354}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1369}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1376}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1381}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1387}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1405}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":340,"column":0},"generated":{"line":1,"column":1408}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":340,"column":0},"generated":{"line":1,"column":1413}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":340,"column":0},"generated":{"line":1,"column":1426}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":341,"column":0},"generated":{"line":1,"column":1428}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":341,"column":0},"generated":{"line":1,"column":1433}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":341,"column":0},"generated":{"line":1,"column":1444}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":342,"column":0},"generated":{"line":1,"column":1446}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":342,"column":0},"generated":{"line":1,"column":1451}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":342,"column":0},"generated":{"line":1,"column":1464}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":343,"column":0},"generated":{"line":1,"column":1466}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":343,"column":0},"generated":{"line":1,"column":1471}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":343,"column":0},"generated":{"line":1,"column":1483}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":343,"column":0},"generated":{"line":1,"column":1490}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":344,"column":0},"generated":{"line":1,"column":1492}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":344,"column":0},"generated":{"line":1,"column":1497}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":344,"column":0},"generated":{"line":1,"column":1510}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":346,"column":0},"generated":{"line":1,"column":1515}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":346,"column":0},"generated":{"line":1,"column":1517}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":346,"column":0},"generated":{"line":1,"column":1527}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":346,"column":0},"generated":{"line":1,"column":1535}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":346,"column":0},"generated":{"line":1,"column":1540}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":366,"column":0},"generated":{"line":1,"column":1547}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":366,"column":0},"generated":{"line":1,"column":1552}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":366,"column":0},"generated":{"line":1,"column":1561}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":366,"column":0},"generated":{"line":1,"column":1563}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":366,"column":0},"generated":{"line":1,"column":1565}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":366,"column":0},"generated":{"line":1,"column":1567}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":366,"column":0},"generated":{"line":1,"column":1569}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":366,"column":0},"generated":{"line":1,"column":1571}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":370,"column":0},"generated":{"line":1,"column":1574}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1581}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1583}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1588}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1590}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1592}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1594}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1596}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1598}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1600}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":1,"column":1605}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":370,"column":0},"generated":{"line":1,"column":1612}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":1,"column":1618}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":1,"column":1630}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":1,"column":1639}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":1,"column":1641}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":1,"column":1643}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":1,"column":1645}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":1,"column":1647}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":1,"column":1649}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":1,"column":1651}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1654}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1661}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1663}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1675}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1677}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1679}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1681}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1683}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1685}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1687}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1689}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":1,"column":1694}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1702}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1714}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1723}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1725}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1727}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1730}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1737}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1739}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1751}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1753}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1755}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1757}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1762}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":1,"column":1770}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":1,"column":1779}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":1,"column":1788}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":1,"column":1790}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":1,"column":1792}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":1,"column":1794}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":1,"column":1796}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":1,"column":1798}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":1,"column":1800}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1803}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1810}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1812}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1821}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1823}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1825}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1827}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1829}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1831}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1833}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1835}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":1,"column":1840}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1848}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1860}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1869}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1871}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1873}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1875}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1877}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1879}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1881}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":484,"column":0},"generated":{"line":1,"column":1884}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1891}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1893}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1905}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1907}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1909}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1911}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1913}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1915}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1917}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1919}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":1,"column":1924}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":484,"column":0},"generated":{"line":1,"column":1931}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":500,"column":0},"generated":{"line":1,"column":1937}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":500,"column":0},"generated":{"line":1,"column":1947}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":500,"column":0},"generated":{"line":1,"column":1956}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":500,"column":0},"generated":{"line":1,"column":1958}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":500,"column":0},"generated":{"line":1,"column":1960}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":502,"column":0},"generated":{"line":1,"column":1963}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":502,"column":0},"generated":{"line":1,"column":1970}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":502,"column":0},"generated":{"line":1,"column":1972}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":502,"column":0},"generated":{"line":1,"column":1982}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":502,"column":0},"generated":{"line":1,"column":1984}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":502,"column":0},"generated":{"line":1,"column":1986}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":502,"column":0},"generated":{"line":1,"column":1988}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":502,"column":0},"generated":{"line":1,"column":1993}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2001}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2018}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2027}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2029}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2031}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2033}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2036}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2043}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2045}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2062}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2064}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2066}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2068}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2070}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2075}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2083}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2098}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2107}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2109}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2111}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2113}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2115}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2118}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2125}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2127}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2142}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2144}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2146}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2148}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2150}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2152}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2157}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":569,"column":0},"generated":{"line":1,"column":2165}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":569,"column":0},"generated":{"line":1,"column":2185}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":569,"column":0},"generated":{"line":1,"column":2194}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":569,"column":0},"generated":{"line":1,"column":2196}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":569,"column":0},"generated":{"line":1,"column":2198}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2201}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2208}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2210}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2230}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2232}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2234}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2236}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2241}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":595,"column":0},"generated":{"line":1,"column":2249}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":595,"column":0},"generated":{"line":1,"column":2271}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":595,"column":0},"generated":{"line":1,"column":2280}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":595,"column":0},"generated":{"line":1,"column":2282}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":595,"column":0},"generated":{"line":1,"column":2284}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":595,"column":0},"generated":{"line":1,"column":2286}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":595,"column":0},"generated":{"line":1,"column":2288}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":595,"column":0},"generated":{"line":1,"column":2290}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2293}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2300}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2302}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2324}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2326}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2328}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2330}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2332}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2334}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2336}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":1,"column":2341}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":612,"column":0},"generated":{"line":1,"column":2349}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":612,"column":0},"generated":{"line":1,"column":2359}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":612,"column":0},"generated":{"line":1,"column":2368}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":612,"column":0},"generated":{"line":1,"column":2370}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":614,"column":0},"generated":{"line":1,"column":2373}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":614,"column":0},"generated":{"line":1,"column":2380}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":614,"column":0},"generated":{"line":1,"column":2382}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":614,"column":0},"generated":{"line":1,"column":2392}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":614,"column":0},"generated":{"line":1,"column":2394}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":614,"column":0},"generated":{"line":1,"column":2396}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":614,"column":0},"generated":{"line":1,"column":2401}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":630,"column":0},"generated":{"line":1,"column":2409}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":630,"column":0},"generated":{"line":1,"column":2426}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":630,"column":0},"generated":{"line":1,"column":2435}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":630,"column":0},"generated":{"line":1,"column":2437}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":630,"column":0},"generated":{"line":1,"column":2439}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":632,"column":0},"generated":{"line":1,"column":2442}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":632,"column":0},"generated":{"line":1,"column":2449}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":632,"column":0},"generated":{"line":1,"column":2451}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":632,"column":0},"generated":{"line":1,"column":2468}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":632,"column":0},"generated":{"line":1,"column":2470}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":632,"column":0},"generated":{"line":1,"column":2472}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":632,"column":0},"generated":{"line":1,"column":2474}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":632,"column":0},"generated":{"line":1,"column":2479}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":651,"column":0},"generated":{"line":1,"column":2487}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":651,"column":0},"generated":{"line":1,"column":2497}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":651,"column":0},"generated":{"line":1,"column":2506}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":651,"column":0},"generated":{"line":1,"column":2508}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":651,"column":0},"generated":{"line":1,"column":2510}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":651,"column":0},"generated":{"line":1,"column":2512}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":1,"column":2515}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":1,"column":2522}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":1,"column":2524}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":1,"column":2534}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":1,"column":2536}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":1,"column":2538}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":1,"column":2540}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":1,"column":2542}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":1,"column":2547}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":673,"column":0},"generated":{"line":1,"column":2555}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":673,"column":0},"generated":{"line":1,"column":2572}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":673,"column":0},"generated":{"line":1,"column":2581}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":673,"column":0},"generated":{"line":1,"column":2583}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":673,"column":0},"generated":{"line":1,"column":2585}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":673,"column":0},"generated":{"line":1,"column":2587}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":673,"column":0},"generated":{"line":1,"column":2589}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2592}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2599}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2601}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2618}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2620}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2622}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2624}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2626}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2628}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2633}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":696,"column":0},"generated":{"line":1,"column":2641}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":696,"column":0},"generated":{"line":1,"column":2652}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":696,"column":0},"generated":{"line":1,"column":2661}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":696,"column":0},"generated":{"line":1,"column":2663}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":696,"column":0},"generated":{"line":1,"column":2665}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":696,"column":0},"generated":{"line":1,"column":2667}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2670}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":698,"column":0},"generated":{"line":1,"column":2677}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":698,"column":0},"generated":{"line":1,"column":2679}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":698,"column":0},"generated":{"line":1,"column":2690}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":698,"column":0},"generated":{"line":1,"column":2692}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":698,"column":0},"generated":{"line":1,"column":2694}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":698,"column":0},"generated":{"line":1,"column":2696}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":698,"column":0},"generated":{"line":1,"column":2698}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":698,"column":0},"generated":{"line":1,"column":2703}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2710}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":721,"column":0},"generated":{"line":1,"column":2716}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":721,"column":0},"generated":{"line":1,"column":2726}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":721,"column":0},"generated":{"line":1,"column":2735}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":721,"column":0},"generated":{"line":1,"column":2737}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":721,"column":0},"generated":{"line":1,"column":2739}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":721,"column":0},"generated":{"line":1,"column":2741}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":721,"column":0},"generated":{"line":1,"column":2743}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":725,"column":0},"generated":{"line":1,"column":2746}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":1,"column":2753}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":1,"column":2755}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":1,"column":2765}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":1,"column":2767}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":1,"column":2769}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":1,"column":2771}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":1,"column":2773}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":1,"column":2775}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":1,"column":2780}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":725,"column":0},"generated":{"line":1,"column":2787}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":744,"column":0},"generated":{"line":1,"column":2793}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":744,"column":0},"generated":{"line":1,"column":2806}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":744,"column":0},"generated":{"line":1,"column":2815}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":744,"column":0},"generated":{"line":1,"column":2817}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":744,"column":0},"generated":{"line":1,"column":2819}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":744,"column":0},"generated":{"line":1,"column":2821}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":1,"column":2824}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":1,"column":2831}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":1,"column":2833}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":1,"column":2846}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":1,"column":2848}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":1,"column":2850}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":1,"column":2852}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":1,"column":2854}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":1,"column":2859}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":766,"column":0},"generated":{"line":1,"column":2867}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":766,"column":0},"generated":{"line":1,"column":2887}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":766,"column":0},"generated":{"line":1,"column":2896}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":766,"column":0},"generated":{"line":1,"column":2898}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":766,"column":0},"generated":{"line":1,"column":2900}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":766,"column":0},"generated":{"line":1,"column":2902}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":766,"column":0},"generated":{"line":1,"column":2904}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2907}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2914}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2916}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2936}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2938}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2940}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2942}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2944}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2946}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":1,"column":2951}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":791,"column":0},"generated":{"line":1,"column":2959}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":791,"column":0},"generated":{"line":1,"column":2971}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":791,"column":0},"generated":{"line":1,"column":2980}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":791,"column":0},"generated":{"line":1,"column":2982}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":795,"column":0},"generated":{"line":1,"column":2985}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":793,"column":0},"generated":{"line":1,"column":2992}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":793,"column":0},"generated":{"line":1,"column":2994}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":793,"column":0},"generated":{"line":1,"column":3006}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":793,"column":0},"generated":{"line":1,"column":3008}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":793,"column":0},"generated":{"line":1,"column":3010}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":793,"column":0},"generated":{"line":1,"column":3015}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":795,"column":0},"generated":{"line":1,"column":3022}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":815,"column":0},"generated":{"line":1,"column":3028}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":815,"column":0},"generated":{"line":1,"column":3043}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":815,"column":0},"generated":{"line":1,"column":3052}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":815,"column":0},"generated":{"line":1,"column":3054}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":815,"column":0},"generated":{"line":1,"column":3056}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":815,"column":0},"generated":{"line":1,"column":3058}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":815,"column":0},"generated":{"line":1,"column":3060}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":815,"column":0},"generated":{"line":1,"column":3062}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":819,"column":0},"generated":{"line":1,"column":3065}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3072}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3074}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3089}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3091}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3093}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3095}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3097}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3099}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3101}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":1,"column":3106}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":819,"column":0},"generated":{"line":1,"column":3113}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":835,"column":0},"generated":{"line":1,"column":3119}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":835,"column":0},"generated":{"line":1,"column":3131}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":835,"column":0},"generated":{"line":1,"column":3140}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":841,"column":0},"generated":{"line":1,"column":3143}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":837,"column":0},"generated":{"line":1,"column":3155}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":837,"column":0},"generated":{"line":1,"column":3159}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":837,"column":0},"generated":{"line":1,"column":3163}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":837,"column":0},"generated":{"line":1,"column":3166}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":839,"column":0},"generated":{"line":1,"column":3169}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":839,"column":0},"generated":{"line":1,"column":3174}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":839,"column":0},"generated":{"line":1,"column":3183}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":841,"column":0},"generated":{"line":1,"column":3185}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":859,"column":0},"generated":{"line":1,"column":3191}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":859,"column":0},"generated":{"line":1,"column":3206}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":859,"column":0},"generated":{"line":1,"column":3215}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":859,"column":0},"generated":{"line":1,"column":3217}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":867,"column":0},"generated":{"line":1,"column":3220}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3232}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3236}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3240}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3242}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":862,"column":0},"generated":{"line":1,"column":3250}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":862,"column":0},"generated":{"line":1,"column":3254}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":862,"column":0},"generated":{"line":1,"column":3258}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":862,"column":0},"generated":{"line":1,"column":3260}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":864,"column":0},"generated":{"line":1,"column":3263}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":864,"column":0},"generated":{"line":1,"column":3268}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":864,"column":0},"generated":{"line":1,"column":3281}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":865,"column":0},"generated":{"line":1,"column":3283}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":865,"column":0},"generated":{"line":1,"column":3288}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":865,"column":0},"generated":{"line":1,"column":3301}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":867,"column":0},"generated":{"line":1,"column":3303}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":886,"column":0},"generated":{"line":1,"column":3309}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":886,"column":0},"generated":{"line":1,"column":3322}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":886,"column":0},"generated":{"line":1,"column":3331}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":886,"column":0},"generated":{"line":1,"column":3333}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":886,"column":0},"generated":{"line":1,"column":3335}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":890,"column":0},"generated":{"line":1,"column":3338}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":888,"column":0},"generated":{"line":1,"column":3345}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":888,"column":0},"generated":{"line":1,"column":3347}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":888,"column":0},"generated":{"line":1,"column":3360}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":888,"column":0},"generated":{"line":1,"column":3362}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":888,"column":0},"generated":{"line":1,"column":3364}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":888,"column":0},"generated":{"line":1,"column":3366}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":888,"column":0},"generated":{"line":1,"column":3371}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":890,"column":0},"generated":{"line":1,"column":3378}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":1,"column":3384}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":1,"column":3404}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":1,"column":3413}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":1,"column":3415}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":1,"column":3417}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":1,"column":3419}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3422}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3429}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3431}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3451}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3453}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3455}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3457}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3459}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3464}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3471}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":939,"column":0},"generated":{"line":1,"column":3477}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":939,"column":0},"generated":{"line":1,"column":3500}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":939,"column":0},"generated":{"line":1,"column":3509}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":939,"column":0},"generated":{"line":1,"column":3511}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":939,"column":0},"generated":{"line":1,"column":3513}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":943,"column":0},"generated":{"line":1,"column":3516}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3523}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3525}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3548}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3550}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3552}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3554}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3559}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":943,"column":0},"generated":{"line":1,"column":3566}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3572}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3596}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3605}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3607}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3609}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":966,"column":0},"generated":{"line":1,"column":3612}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3619}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3621}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3645}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3647}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3649}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3651}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3656}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":966,"column":0},"generated":{"line":1,"column":3663}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3669}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3700}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3709}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3711}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":989,"column":0},"generated":{"line":1,"column":3714}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":987,"column":0},"generated":{"line":1,"column":3721}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":987,"column":0},"generated":{"line":1,"column":3723}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":987,"column":0},"generated":{"line":1,"column":3754}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":987,"column":0},"generated":{"line":1,"column":3756}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":987,"column":0},"generated":{"line":1,"column":3758}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":987,"column":0},"generated":{"line":1,"column":3763}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":989,"column":0},"generated":{"line":1,"column":3770}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3776}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3797}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3806}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3808}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3810}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1012,"column":0},"generated":{"line":1,"column":3813}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":3820}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":3822}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":3843}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":3845}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":3847}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":3849}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":3854}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1012,"column":0},"generated":{"line":1,"column":3861}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1032,"column":0},"generated":{"line":1,"column":3867}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1032,"column":0},"generated":{"line":1,"column":3891}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1032,"column":0},"generated":{"line":1,"column":3900}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1032,"column":0},"generated":{"line":1,"column":3902}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1032,"column":0},"generated":{"line":1,"column":3904}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1032,"column":0},"generated":{"line":1,"column":3906}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1032,"column":0},"generated":{"line":1,"column":3908}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1032,"column":0},"generated":{"line":1,"column":3910}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1036,"column":0},"generated":{"line":1,"column":3913}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3920}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3922}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3946}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3948}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3950}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3952}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3954}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3956}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3958}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1034,"column":0},"generated":{"line":1,"column":3963}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1036,"column":0},"generated":{"line":1,"column":3970}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1055,"column":0},"generated":{"line":1,"column":3976}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1055,"column":0},"generated":{"line":1,"column":3984}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1055,"column":0},"generated":{"line":1,"column":3993}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1055,"column":0},"generated":{"line":1,"column":3995}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1055,"column":0},"generated":{"line":1,"column":3997}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1055,"column":0},"generated":{"line":1,"column":3999}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1059,"column":0},"generated":{"line":1,"column":4002}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1057,"column":0},"generated":{"line":1,"column":4009}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1057,"column":0},"generated":{"line":1,"column":4011}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1057,"column":0},"generated":{"line":1,"column":4019}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1057,"column":0},"generated":{"line":1,"column":4021}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1057,"column":0},"generated":{"line":1,"column":4023}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1057,"column":0},"generated":{"line":1,"column":4025}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1057,"column":0},"generated":{"line":1,"column":4027}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1057,"column":0},"generated":{"line":1,"column":4032}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1059,"column":0},"generated":{"line":1,"column":4039}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1079,"column":0},"generated":{"line":1,"column":4045}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1079,"column":0},"generated":{"line":1,"column":4057}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1079,"column":0},"generated":{"line":1,"column":4066}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1079,"column":0},"generated":{"line":1,"column":4068}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1079,"column":0},"generated":{"line":1,"column":4070}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1079,"column":0},"generated":{"line":1,"column":4072}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1079,"column":0},"generated":{"line":1,"column":4074}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1079,"column":0},"generated":{"line":1,"column":4076}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1083,"column":0},"generated":{"line":1,"column":4079}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4086}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4088}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4100}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4102}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4104}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4106}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4108}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4110}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4112}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1081,"column":0},"generated":{"line":1,"column":4117}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1083,"column":0},"generated":{"line":1,"column":4124}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4130}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4143}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4152}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4154}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1100,"column":0},"generated":{"line":1,"column":4157}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1100,"column":0},"generated":{"line":1,"column":4164}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1100,"column":0},"generated":{"line":1,"column":4166}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1100,"column":0},"generated":{"line":1,"column":4179}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1100,"column":0},"generated":{"line":1,"column":4181}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1100,"column":0},"generated":{"line":1,"column":4183}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1100,"column":0},"generated":{"line":1,"column":4188}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4196}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4209}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4218}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4220}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1117,"column":0},"generated":{"line":1,"column":4223}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1117,"column":0},"generated":{"line":1,"column":4230}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1117,"column":0},"generated":{"line":1,"column":4232}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1117,"column":0},"generated":{"line":1,"column":4245}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1117,"column":0},"generated":{"line":1,"column":4247}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1117,"column":0},"generated":{"line":1,"column":4249}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1117,"column":0},"generated":{"line":1,"column":4254}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1135,"column":0},"generated":{"line":1,"column":4262}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1135,"column":0},"generated":{"line":1,"column":4276}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1135,"column":0},"generated":{"line":1,"column":4285}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1135,"column":0},"generated":{"line":1,"column":4287}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1135,"column":0},"generated":{"line":1,"column":4289}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1135,"column":0},"generated":{"line":1,"column":4291}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1137,"column":0},"generated":{"line":1,"column":4294}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1137,"column":0},"generated":{"line":1,"column":4301}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1137,"column":0},"generated":{"line":1,"column":4303}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1137,"column":0},"generated":{"line":1,"column":4317}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1137,"column":0},"generated":{"line":1,"column":4319}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1137,"column":0},"generated":{"line":1,"column":4321}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1137,"column":0},"generated":{"line":1,"column":4323}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1137,"column":0},"generated":{"line":1,"column":4325}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1137,"column":0},"generated":{"line":1,"column":4330}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1168,"column":0},"generated":{"line":1,"column":4338}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1168,"column":0},"generated":{"line":1,"column":4356}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1168,"column":0},"generated":{"line":1,"column":4365}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1168,"column":0},"generated":{"line":1,"column":4367}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1168,"column":0},"generated":{"line":1,"column":4369}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1168,"column":0},"generated":{"line":1,"column":4371}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1168,"column":0},"generated":{"line":1,"column":4373}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1172,"column":0},"generated":{"line":1,"column":4376}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1170,"column":0},"generated":{"line":1,"column":4383}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1170,"column":0},"generated":{"line":1,"column":4385}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1170,"column":0},"generated":{"line":1,"column":4403}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1170,"column":0},"generated":{"line":1,"column":4405}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1170,"column":0},"generated":{"line":1,"column":4407}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1170,"column":0},"generated":{"line":1,"column":4409}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1170,"column":0},"generated":{"line":1,"column":4411}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1170,"column":0},"generated":{"line":1,"column":4413}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1170,"column":0},"generated":{"line":1,"column":4418}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1172,"column":0},"generated":{"line":1,"column":4425}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1189,"column":0},"generated":{"line":1,"column":4431}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1189,"column":0},"generated":{"line":1,"column":4444}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1189,"column":0},"generated":{"line":1,"column":4453}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1189,"column":0},"generated":{"line":1,"column":4455}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1189,"column":0},"generated":{"line":1,"column":4457}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1191,"column":0},"generated":{"line":1,"column":4460}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1191,"column":0},"generated":{"line":1,"column":4467}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1191,"column":0},"generated":{"line":1,"column":4469}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1191,"column":0},"generated":{"line":1,"column":4482}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1191,"column":0},"generated":{"line":1,"column":4484}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1191,"column":0},"generated":{"line":1,"column":4486}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1191,"column":0},"generated":{"line":1,"column":4488}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1191,"column":0},"generated":{"line":1,"column":4493}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1208,"column":0},"generated":{"line":1,"column":4501}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1208,"column":0},"generated":{"line":1,"column":4514}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1208,"column":0},"generated":{"line":1,"column":4523}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1208,"column":0},"generated":{"line":1,"column":4525}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1208,"column":0},"generated":{"line":1,"column":4527}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1210,"column":0},"generated":{"line":1,"column":4530}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1210,"column":0},"generated":{"line":1,"column":4537}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1210,"column":0},"generated":{"line":1,"column":4539}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1210,"column":0},"generated":{"line":1,"column":4552}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1210,"column":0},"generated":{"line":1,"column":4554}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1210,"column":0},"generated":{"line":1,"column":4556}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1210,"column":0},"generated":{"line":1,"column":4558}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1210,"column":0},"generated":{"line":1,"column":4563}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1230,"column":0},"generated":{"line":1,"column":4571}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1230,"column":0},"generated":{"line":1,"column":4585}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1230,"column":0},"generated":{"line":1,"column":4594}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1230,"column":0},"generated":{"line":1,"column":4596}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1230,"column":0},"generated":{"line":1,"column":4598}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1230,"column":0},"generated":{"line":1,"column":4600}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1230,"column":0},"generated":{"line":1,"column":4602}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4605}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4612}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4614}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4628}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4630}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4632}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4634}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4636}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4638}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4643}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4653}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4660}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4668}}],"sources":{"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar DynamicTilemapLayerRender = require('./DynamicTilemapLayerRender');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar TilemapComponents = require('../components');\r\n\r\n/**\r\n * @classdesc\r\n * A DynamicTilemapLayer is a game object that renders LayerData from a Tilemap. A\r\n * DynamicTilemapLayer can only render tiles from a single tileset.\r\n *\r\n * A DynamicTilemapLayer trades some speed for being able to apply powerful effects. Unlike a\r\n * StaticTilemapLayer, you can apply per-tile effects like tint or alpha, and you can change the\r\n * tiles in a DynamicTilemapLayer. Use this over a StaticTilemapLayer when you need those\r\n * features.\r\n *\r\n * @class DynamicTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {Phaser.Tilemaps.Tileset} tileset - The tileset used to render the tiles in this layer.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar DynamicTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        DynamicTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function DynamicTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'DynamicTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        this.layer.tilemapLayer = this; // Link the LayerData with this static tilemap layer\r\n\r\n        /**\r\n         * The Tileset associated with this layer. A tilemap layer can only render from one Tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = tileset;\r\n\r\n        /**\r\n         * Used internally with the canvas render. This holds the tiles that are visible within the\r\n         * camera.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * You can control if the Cameras should cull tiles before rendering them or not.\r\n         * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n         * \r\n         * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n         * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#skipCull\r\n         * @type {boolean}\r\n         * @since 3.11.0\r\n         */\r\n        this.skipCull = false;\r\n\r\n        /**\r\n         * The total number of tiles drawn by the renderer in the last frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesDrawn\r\n         * @type {number}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesDrawn = 0;\r\n\r\n        /**\r\n         * The total number of tiles in this layer. Updated every frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesTotal\r\n         * @type {number}\r\n         * @readOnly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesTotal = this.layer.width * this.layer.height;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n         * \r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingX\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingX = 1;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n         * \r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingY\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingY = 1;\r\n\r\n        /**\r\n         * The callback that is invoked when the tiles are culled.\r\n         * \r\n         * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n         * \r\n         * It will be sent 3 arguments:\r\n         * \r\n         * 1) The Phaser.Tilemaps.LayerData object for this Layer\r\n         * 2) The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n         * 3) A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n         * \r\n         * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullCallback\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.cullCallback = TilemapComponents.CullTiles;\r\n\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(this.layer.tileWidth * this.layer.width, this.layer.tileHeight * this.layer.height);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {object} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return this.cullCallback(this.layer, camera, this.culledTiles);\r\n    },\r\n\r\n    /**\r\n     * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n     * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n     * information in the destination region.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} srcTileX - [description]\r\n     * @param {integer} srcTileY - [description]\r\n     * @param {integer} width - [description]\r\n     * @param {integer} height - [description]\r\n     * @param {integer} destTileX - [description]\r\n     * @param {integer} destTileY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys this DynamicTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        // Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.tileset = undefined;\r\n        this.culledTiles.length = 0;\r\n        this.cullCallback = null;\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n     * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n     * Collision information in the region will be recalculated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#fill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - [description]\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    fill: function (index, tileX, tileY, width, height, recalculateFaces)\r\n    {\r\n        TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n     * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n     * location. If you pass in an index, only the index at the specified location will be changed.\r\n     * Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAt: function (tile, tileX, tileY, recalculateFaces)\r\n    {\r\n        return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n     * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n     * specified location. If you pass in an index, only the index at the specified location will be\r\n     * changed. Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} worldX - [description]\r\n     * @param {integer} worldY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n     * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n     * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n     * index at the specified location will be changed. Collision information will be recalculated\r\n     * within the region tiles were changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTilesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles\r\n     * or tile indexes to place.\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. If an array of indexes is passed in, then\r\n     * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n     * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n     * indexes. This method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#randomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    randomize: function (tileX, tileY, width, height, indexes)\r\n    {\r\n        TilemapComponents.Randomize(tileX, tileY, width, height, indexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified\r\n     * location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces)\r\n    {\r\n        return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified\r\n     * location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     * @param {?Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n     * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n     * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n     * tile faces. If set to null, interesting tile faces will not be drawn.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n     * not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#replaceByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} findIndex - [description]\r\n     * @param {integer} newIndex - [description]\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     * \r\n     * However, there are some instances when you may wish to disable this.\r\n     * \r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setSkipCull\r\n     * @since 3.11.0\r\n     *\r\n     * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setSkipCull: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.skipCull = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * When a Camera culls the tiles in this layer it does so using its view into the world, building up a \r\n     * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n     * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n     * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n     * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n     * \r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCullPadding\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n     * @param {number} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setCullPadding: function (paddingX, paddingY)\r\n    {\r\n        if (paddingX === undefined) { paddingX = 1; }\r\n        if (paddingY === undefined) { paddingY = 1; }\r\n\r\n        this.cullPaddingX = paddingX;\r\n        this.cullPaddingY = paddingY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should\r\n     * be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n     * collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {integer} width - [description]\r\n     * @param {integer} height - [description]\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} [callbackContext] - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n     * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n     * appear to have changed! This method only modifies tile indexes and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    shuffle: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.Shuffle(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#swapByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileA - First tile index.\r\n     * @param {integer} tileB - Second tile index.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    swapByIndex: function (indexA, indexB, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will recieve a new index. New indexes are drawn from the given\r\n     * weightedIndexes array. An example weighted array:\r\n     *\r\n     * [\r\n     *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n     *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n     *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n     *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n     * ]\r\n     *\r\n     * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n     * method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#weightedRandomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n     * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n     * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    weightedRandomize: function (tileX, tileY, width, height, weightedIndexes)\r\n    {\r\n        TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DynamicTilemapLayer;\r\n"},"lineCount":null}},"hash":"e0ced592acd31b1e03623674c54f7009","cacheData":{"env":{}}}