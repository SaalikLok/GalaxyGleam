{"id":"0jDa","dependencies":[{"name":"/Users/saaliklok/Documents/Projects/GalaxyGleam/node_modules/phaser/package.json","includedInParent":true,"mtime":1531478196000},{"name":"/Users/saaliklok/Documents/Projects/GalaxyGleam/package.json","includedInParent":true,"mtime":1534524783201},{"name":"/Users/saaliklok/Documents/Projects/GalaxyGleam/.babelrc","includedInParent":true,"mtime":1534008004456}],"generated":{"js":"var o=function(o,r,n){return void 0===n&&(n=0),0===r?o:(o-=n,n+(o=r*Math.round(o/r)))};module.exports=o;","map":{"mappings":[{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":21,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":21,"column":0},"generated":{"line":1,"column":4}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":21,"column":0},"generated":{"line":1,"column":6}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":21,"column":0},"generated":{"line":1,"column":15}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":21,"column":0},"generated":{"line":1,"column":17}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":21,"column":0},"generated":{"line":1,"column":19}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":25,"column":0},"generated":{"line":1,"column":22}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":23,"column":0},"generated":{"line":1,"column":34}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":23,"column":0},"generated":{"line":1,"column":38}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":23,"column":0},"generated":{"line":1,"column":42}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":23,"column":0},"generated":{"line":1,"column":44}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":25,"column":0},"generated":{"line":1,"column":47}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":25,"column":0},"generated":{"line":1,"column":51}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":27,"column":0},"generated":{"line":1,"column":53}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":30,"column":0},"generated":{"line":1,"column":56}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":30,"column":0},"generated":{"line":1,"column":59}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":33,"column":0},"generated":{"line":1,"column":61}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":31,"column":0},"generated":{"line":1,"column":64}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":31,"column":0},"generated":{"line":1,"column":66}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":31,"column":0},"generated":{"line":1,"column":68}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":31,"column":0},"generated":{"line":1,"column":73}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":31,"column":0},"generated":{"line":1,"column":79}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":31,"column":0},"generated":{"line":1,"column":81}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":36,"column":0},"generated":{"line":1,"column":87}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":36,"column":0},"generated":{"line":1,"column":94}},{"source":"node_modules/phaser/src/math/snap/SnapTo.js","original":{"line":36,"column":0},"generated":{"line":1,"column":102}}],"sources":{"node_modules/phaser/src/math/snap/SnapTo.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * Snap a value to nearest grid slice, using rounding.\r\n *\r\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10` whereas `14` will snap to `15`.\r\n *\r\n * @function Phaser.Math.Snap.To\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to snap.\r\n * @param {number} gap - The interval gap of the grid.\r\n * @param {number} [start=0] - Optional starting offset for gap.\r\n *\r\n * @return {number} The snapped value.\r\n */\r\nvar SnapTo = function (value, gap, start)\r\n{\r\n    if (start === undefined) { start = 0; }\r\n\r\n    if (gap === 0)\r\n    {\r\n        return value;\r\n    }\r\n\r\n    value -= start;\r\n    value = gap * Math.round(value / gap);\r\n\r\n    return start + value;\r\n};\r\n\r\nmodule.exports = SnapTo;\r\n"},"lineCount":null}},"hash":"316ddb6d34833926af6562b9bb67aea9","cacheData":{"env":{}}}